version: "3"

env:
  CERT_MANAGER_ISSUER_YML: cert-manager/cert-manager-issuer.yml
  CROSSPLANE_HELM_PROVIDER_YML: crossplane/crossplane-helm-provider.yml
  CROSSPLANE_K8S_PROVIDER_YML: crossplane/crossplane-k8s-provider.yml
  DOCKER_REPOSITORY_CREDS_STATIC_SECRET_PATH: /Sandbox/2 - Static/SRA Docker K8s Creds
  DOCKER_REPOSITORY_CREDS_AKEYLESS_CLI_PATH: akeyless get-secret-value -n "{{.DOCKER_REPOSITORY_CREDS_STATIC_SECRET_PATH}}" --profile cs
  GCP_PROJECT_ID: customer-success-391112
  GCP_SERVICE_ACCOUNT_NAME: sbx-sra-sa
  GCP_SERVICE_ACCOUNT: "{{.GCP_SERVICE_ACCOUNT_NAME}}@{{.GCP_PROJECT_ID}}.iam.gserviceaccount.com"
  HELM_SRA_RELEASE_NAME: sra
  HELM_SRA_VALUES_YML: sra/values.yaml
  HELM_SRA_WEB_RELEASE_NAME: sra-web
  HELM_SRA_WEB_VALUES_YML: sra-web/values.yaml
  K8S_SERVICE_ACCOUNT: cgruel-sra-sbx-sa
  KUBECTL_CONTEXT: cs-gke-sandbox
  KUBECTL_NAMESPACE: cgruel-sra

tasks:
  k8scontext:
    desc: "Set kubectl context and namespace"
    cmds:
      - kubectl config use-context "{{.KUBECTL_CONTEXT}}"
      - kubectl config set-context --current --namespace="{{.KUBECTL_NAMESPACE}}"

  deploy-issuer:
    deps:
      - k8scontext
    cmds:
      - kubectl apply -f "{{.CERT_MANAGER_ISSUER_YML}}"

  deploy-sra-helm:
    desc: "Deploy SRA Helm chart"
    deps:
      - k8scontext
    vars:
      DOCKER_REPOSITORY_CREDS:
        sh: "{{.DOCKER_REPOSITORY_CREDS_AKEYLESS_CLI_PATH}}"
    cmds:
      - helm upgrade --install {{.HELM_SRA_RELEASE_NAME}} akeyless/akeyless-sra -f "{{.HELM_SRA_VALUES_YML}}" --set dockerRepositoryCreds={{.DOCKER_REPOSITORY_CREDS}}

  deploy-sra-web-helm:
    desc: "Deploy SRA Web Helm chart"
    deps:
      - k8scontext
    vars:
      DOCKER_REPOSITORY_CREDS:
        sh: "{{.DOCKER_REPOSITORY_CREDS_AKEYLESS_CLI_PATH}}"
    cmds:
      - helm upgrade --install {{.HELM_SRA_WEB_RELEASE_NAME}} akeyless/akeyless-zero-trust-web-access -f "{{.HELM_SRA_WEB_VALUES_YML}}" --set image.dockerRepositoryCreds={{.DOCKER_REPOSITORY_CREDS}}

  setup-crossplane-install:
    desc: "Install Crossplane"
    deps:
      - k8scontext
    cmds:
      - helm repo add crossplane-stable https://charts.crossplane.io/stable
      - helm repo update
      - helm install crossplane crossplane-stable/crossplane --namespace crossplane-system --create-namespace

  setup-crossplane-k8s-provider:
    deps:
      - k8scontext
    cmds:
      - kubectl apply -f "{{.CROSSPLANE_K8S_PROVIDER_YML}}"

  setup-crossplane-helm-provider:
    deps:
      - k8scontext
    cmds:
      - kubectl apply -f "{{.CROSSPLANE_HELM_PROVIDER_YML}}"

  setup-gcp-workload-identity:
    # Make sure these variables are set before running
    requires:
      vars:
        - GCP_PROJECT_ID
        - GCP_SERVICE_ACCOUNT_NAME
        - K8S_SERVICE_ACCOUNT
        - KUBECTL_NAMESPACE
    desc: "Setup GCP workload identity by creating service account and binding IAM policy"
    cmds:
      - |
        # Check if service account exists, create if it doesn't
        if ! gcloud iam service-accounts describe $GCP_SERVICE_ACCOUNT --project=$GCP_PROJECT_ID &>/dev/null; then
          gcloud iam service-accounts create $GCP_SERVICE_ACCOUNT_NAME --project=$GCP_PROJECT_ID
        else
          echo "Service account $GCP_SERVICE_ACCOUNT already exists"
        fi

        # Check if IAM policy binding exists, add if it doesn't
        if ! gcloud iam service-accounts get-iam-policy $GCP_SERVICE_ACCOUNT --project=$GCP_PROJECT_ID --format=yaml | grep -q "serviceAccount:$GCP_PROJECT_ID.svc.id.goog\[$KUBECTL_NAMESPACE/$K8S_SERVICE_ACCOUNT\]"; then
          gcloud iam service-accounts add-iam-policy-binding $GCP_SERVICE_ACCOUNT --role roles/iam.workloadIdentityUser --member "serviceAccount:$GCP_PROJECT_ID.svc.id.goog[$KUBECTL_NAMESPACE/$K8S_SERVICE_ACCOUNT]" --project=$GCP_PROJECT_ID
        else
          echo "IAM policy binding already exists for $K8S_SERVICE_ACCOUNT"
        fi
